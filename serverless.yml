service: serverless

plugins:
  - serverless-cognito-user-setup
  - serverless-plugin-webpack
  - serverless-s3-deploy

custom:
  assets:
    auto: true
    targets:
     - bucket: ${file(./config/env.yml):domainName}
       files:
        - source: ./dist/
          globs: '**/*'
  cognitoUserSetup:
    userPoolName: ${file(./config/env.yml):name}
    userPoolClientName: ${file(./config/env.yml):name}
    users:
      -
        Username: admin@example.com
        Password: ${env:ADMIN_PASSWORD}
        UserAttributes:
          -
            Name: email
            Value: admin@example.com


provider:
  name: aws
  profile: ${file(./config/env.yml):profile}
  stage: ${file(./config/env.yml):stage}
  region: ${file(./config/env.yml):region}

functions:
  authorizer:
    runtime: nodejs6.10
    handler: src/service/authorizer/authorizer.handler
    environment:
      userPoolId: ${self:resources.Outputs.UserPool.Value}
      region: ${self:provider.region}
    memorySize: 128
    timeout: 10
  config:
    runtime: nodejs6.10
    handler: src/service/config/config.handler
    environment:
      region: ${self:provider.region}
      userPoolId: ${self:resources.Outputs.UserPool.Value}
      clientId: ${self:resources.Outputs.PoolClient.Value}
      identityPoolId: ${self:resources.Outputs.IdentityPool.Value}
      cognitoLogin:
        Fn::Join:
          - ''
          -
            - 'cognito-idp.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - ${self:resources.Outputs.UserPool.Value}
    events:
      - http:
          path: config
          method: GET
          cors:
            origins:
              - '*'
            allowCredentials: true
    memorySize: 128
    timeout: 10
  game:
    runtime: nodejs6.10
    handler: src/service/game/game.handler
    events:
      - http:
          path: test
          method: GET
          cors:
            origins:
              - '*'
            allowCredentials: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.authorizationToken
    memorySize: 128
    timeout: 10
  post:
    runtime: nodejs6.10
    handler: src/service/post/post.handler
    environment:
      dbName: ${self:resources.Outputs.DynamoTable.Value}
    events:
      - http:
          path: post
          method: POST
          cors:
            origins:
              - '*'
            allowCredentials: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.authorizationToken
    memorySize: 128
    timeout: 10

resources:
  Resources:
    HostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${file(./config/env.yml):domainName}
    RecordSet:
      Type: AWS::Route53::RecordSet
      DependsOn: HostedZone
      Properties:
        Name: ${file(./config/env.yml):domainName}
        HostedZoneName:
          Fn::Join:
            - ''
            - - ${file(./config/env.yml):domainName}
              - '.'
        Type: A
        AliasTarget:
          DNSName: { Fn::GetAtt: [ CloudFront, DomainName ] }
          HostedZoneId: Z2FDTNDATAQYW2
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${file(./config/env.yml):domainName}
          PriceClass: PriceClass_All
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: ${file(./config/env.yml):certArn}
            SslSupportMethod: sni-only
          Origins:
            -
              Id: S3-Website
              DomainName:
                Fn::Join:
                  - ''
                  -
                    - ${file(./config/env.yml):domainName}
                    - '.s3-website.'
                    - ${self:provider.region}
                    - '.amazonaws.com'
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
            -
              Id: Api-Gateway
              DomainName:
                Fn::Join:
                  - ''
                  -
                    - Ref: ApiGatewayRestApi
                    - Fn::Join:
                        - ''
                        -
                          - '.execute-api.'
                          - ${file(./config/env.yml):region}
                          - '.amazonaws.com'
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
                  - TLSv1.1
                  - TLSv1
          DefaultCacheBehavior:
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3-Website
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            -
              PathPattern: '/${self:provider.stage}/*'
              Compress: true
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              TargetOriginId: Api-Gateway
              ForwardedValues:
                QueryString: true
                Headers:
                  - Accept
                  - Accept-Charset
                  - Accept-Datetime
                  - Accept-Language
                  - Authorization
                  - authorizationToken
                  - Origin
                  - Referer
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
          Enabled: true
    Cognito:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${file(./config/env.yml):name}
        AutoVerifiedAttributes:
          - email
        Schema:
          -
            Name: email
            Required: true
    PoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${file(./config/env.yml):name}
        UserPoolId:
          Ref: Cognito
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${file(./config/env.yml):name}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          -
            ClientId:
              Ref: PoolClient
            ProviderName:
              Fn::Join:
                - ''
                - - 'cognito-idp.${self:provider.region}.amazonaws.com/'
                  - Ref: Cognito
    Dynamodb:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: key
            AttributeType: S
        KeySchema:
          -
            AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: serverlessValues
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./config/env.yml):domainName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    AuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join:
            - ''
            -
              - Ref: AWS::Region
              - '-authRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action: 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
    UnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join:
            - ''
            -
              - Ref: AWS::Region
              - '-unAuthRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action: 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated: { Fn::GetAtt: [ AuthRole, Arn ] }
          unauthenticated: { Fn::GetAtt: [ UnAuthRole, Arn ] }
  Outputs:
    UserPool:
      Value:
        Ref: Cognito
    PoolClient:
      Value:
        Ref: PoolClient
    IdentityPool:
      Value:
        Ref: IdentityPool
    DynamoTable:
      Value:
        Ref: Dynamodb
